/**
* IF62C: Fundamentos de Programação 2
* Programação Orientada a Objetos
*/

package Agendamento_De_Consultas;

import java.awt.Toolkit;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author joaoz
 */
public class Agendamento extends javax.swing.JFrame {

    private int clicado = 0;
    /**
     * Creates new form Agendamento
     */
    public Agendamento() {
        this.setAlwaysOnTop(true);
        this.setResizable(false);
        this.setUndecorated(true);
        initComponents();
        
        Toolkit tk = Toolkit.getDefaultToolkit();
        int tamanhoX = (int) tk.getScreenSize().getWidth();
        int tamanhoY = (int) tk.getScreenSize().getHeight();
        
        this.setSize(tamanhoX, tamanhoY);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblHorarios = new javax.swing.JTable();
        btSair = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        dtSugerida = new javax.swing.JFormattedTextField();
        jLabel6 = new javax.swing.JLabel();
        nomePaciente = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        btVoltar = new javax.swing.JButton();
        cpfPaciente = new javax.swing.JFormattedTextField();
        btAplicar = new javax.swing.JToggleButton();
        btMarcar = new javax.swing.JButton();
        hrConsulta = new javax.swing.JFormattedTextField();
        jLabel8 = new javax.swing.JLabel();
        nomeProfissional = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        observacao = new javax.swing.JTextArea();
        dtConsulta = new javax.swing.JFormattedTextField();
        btDesmarcar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tblHorarios.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        tblHorarios.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tblHorarios.setColumnSelectionAllowed(true);
        tblHorarios.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblHorariosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblHorarios);
        tblHorarios.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        btSair.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btSair.setMnemonic('s');
        btSair.setText("Sair");
        btSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSairActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Consulta/exame/cirurgia deve ser agendada(o) para o dia: ");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setText("Data: ");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel3.setText("Horário: ");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel4.setText("AGENDAMENTO: ");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel5.setText("PRESCRIÇÃO: ");

        try {
            dtSugerida.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel6.setText("Nome do paciente: ");

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel7.setText("CPF do paciente: ");

        btVoltar.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btVoltar.setMnemonic('v');
        btVoltar.setText(" Voltar");
        btVoltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btVoltarActionPerformed(evt);
            }
        });

        try {
            cpfPaciente.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("###.###.###-##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        btAplicar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btAplicar.setMnemonic('a');
        btAplicar.setText("Aplicar");
        btAplicar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAplicarActionPerformed(evt);
            }
        });

        btMarcar.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        btMarcar.setMnemonic('m');
        btMarcar.setText("Marcar");
        btMarcar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btMarcarActionPerformed(evt);
            }
        });

        try {
            hrConsulta.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##:##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel8.setText("Profissional: ");

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel9.setText("Comentário/Observação: ");

        observacao.setColumns(20);
        observacao.setRows(5);
        jScrollPane2.setViewportView(observacao);

        try {
            dtConsulta.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        btDesmarcar.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        btDesmarcar.setMnemonic('d');
        btDesmarcar.setText("Desmarcar");
        btDesmarcar.setToolTipText("");
        btDesmarcar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btDesmarcarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(562, 562, 562)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel5)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel9)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(jLabel1)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(jLabel8)
                                    .addGap(376, 376, 376)))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(dtSugerida, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(177, 177, 177)
                                    .addComponent(btAplicar, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE))
                                .addComponent(nomeProfissional)))
                        .addComponent(jScrollPane1))
                    .addComponent(jLabel4)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7))
                        .addGap(114, 114, 114)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(nomePaciente)
                            .addComponent(cpfPaciente)
                            .addComponent(hrConsulta)
                            .addComponent(dtConsulta, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(538, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btMarcar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43)
                .addComponent(btDesmarcar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44)
                .addComponent(btVoltar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44)
                .addComponent(btSair, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(56, 56, 56))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(73, 73, 73)
                .addComponent(jLabel5)
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(nomeProfissional, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(dtSugerida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btAplicar))
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(dtConsulta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(hrConsulta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(nomePaciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(cpfPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 88, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btSair, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btVoltar, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btMarcar, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btDesmarcar, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSairActionPerformed
        this.dispose();
    }//GEN-LAST:event_btSairActionPerformed

    private void btVoltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btVoltarActionPerformed
        Principal principal = new Principal();
        principal.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btVoltarActionPerformed

    private void btAplicarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAplicarActionPerformed
        DefaultTableModel model = (DefaultTableModel) tblHorarios.getModel();
        
        if(!(nomeProfissional.getText().equals("")) && !(dtSugerida.getText().equals("  /  /    ")))
        {
            if(clicado > 0)
            {
                model.setColumnCount(0);
            }
            
            clicado++;
          
            try{
            FileReader arq = new FileReader(nomeProfissional.getText() + ".txt");
            BufferedReader lerArq = new BufferedReader(arq);
            
            String line = "";
            String ultima = "";
            while(line != null)
            {
                line = lerArq.readLine();
                if(line != null)
                    ultima = line;
                
            }
            String turnos[] = ultima.split(": "); //Obtém a sigla para os turnos em que dado profissional trabalha
            
            // Estipulação de turnos padrão baseada em um determinado modelo de horários de uma instituição
            Turno manha = new Turno(new Horario(7, 30), new Horario(12, 50), 50, true);
            Turno tarde = new Turno(new Horario(13, 0), new Horario(18, 40), 50, true);
            Turno noite = new Turno(new Horario(18, 40), new Horario(23, 0), 50, true);
            
            Object[] hrsProf = new Object[]{}; //Vetor do tipo "Object" para preencher a coluna "Horários" da tabela (JTABLE)
            
            ArrayList<Turno> turnosProf = new ArrayList(); // ArrayList de turnos, para indicar em que turnos dado Profissional trabalha
            
            switch (turnos[1]) { 
                case "MTN":
                    turnosProf.add(manha);
                    turnosProf.add(tarde);
                    turnosProf.add(noite);
                    break;
                case "MT":
                    turnosProf.add(manha);
                    turnosProf.add(tarde);
                    break;
                case "MN":
                    turnosProf.add(manha);
                    turnosProf.add(noite);
                    break;
                case "TN":
                    turnosProf.add(tarde);
                    turnosProf.add(noite);
                    break;
                case "M":
                    turnosProf.add(manha);
                    break;
                case "T":
                    turnosProf.add(tarde);
                    break;
                default:
                    turnosProf.add(noite);
                    break;
            }
            
            ArrayList<String> horariosProf = new ArrayList();// ArrayList que será convertido em vetor para "hrsProf"
            
            int k = 0;
            for(Turno item: turnosProf) // Para cada turno em turnosProf
            {
                for(Horario i: item.retornaHorarios()) // Chama o método "retornaHorários", que retorna um ArrayList<Horario>
                {
                    horariosProf.add(i.toString()); // Adiciona cada Horario do ArrayList retornado para o ArrayList "horariosProf"
                }
            }
            
            hrsProf = horariosProf.toArray(); // converte "horariosProf" em Array e o atribui à "hrsProf" (Object[])
            
            
            model.addColumn("Horários", hrsProf); // Adiciona a coluna

            Object[] disponibilidade = new Object[]{}; // Procedimento semelhante, mas com verificação de disponibilidade, para a coluna "Disponibilidade"
            
            ArrayList<String> disp = new ArrayList();
            
            for(int i = 0; i < hrsProf.length; i++)
            {
                disp.add("LIVRE");
            }
            
            disponibilidade = disp.toArray();
  
            String dt = dtSugerida.getText();
            String data[] = dt.split("/");
            dt = data[0] + data[1] + data[2];
            
            File f = new File(dt + ".txt");
            
            if(f.exists() && !f.isDirectory())
            {
                FileReader file;
                try {
                        file = new FileReader(dt + ".txt");
                        BufferedReader reader = new BufferedReader(file);
                        String linha = reader.readLine();
                        String partes[];
                        while(linha != null)
                        {
                            partes = linha.split("\t");

                            if(partes[0].equals(nomeProfissional.getText()))
                            {
                                for(int i = 0; i < hrsProf.length; i++)
                                {
                                    if(partes[4].equals(hrsProf[i].toString()))
                                    {
                                        disponibilidade[i] = "OCUPADO";
                                    }
                                }
                            }
                            linha = reader.readLine();
                        }
                        reader.close();
                        file.close();
                    }catch (IOException e)
                    {
                      
                        JOptionPane.showMessageDialog(rootPane, "Erro:\n" + e);
                    }  
            }
            
            model.addColumn(dtSugerida.getText(), disponibilidade);
            
        }   catch (FileNotFoundException e) { // Tratamento de exceções!!
                JOptionPane.showMessageDialog(rootPane, "Erro:\n" + e + "\nVerifique se o profissional está cadastrado.");
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(rootPane, "Erro:\n" + ex);
            }
        }
        else
        {
            if(dtSugerida.getText().equals("  /  /    ") && nomeProfissional.getText().equals(""))
            {
                JOptionPane.showMessageDialog(rootPane, "Erro:\nVocê deve inserir uma data e o nome do profissional responsável.");
            }
            else if(dtSugerida.getText().equals("  /  /    "))
            {
                JOptionPane.showMessageDialog(rootPane, "Erro:\nVocê deve inserir uma data.");
            }
            else
            {
                JOptionPane.showMessageDialog(rootPane, "Erro:\nVocê deve inserir o nome do profissional responsável.");
            }
        }
    }//GEN-LAST:event_btAplicarActionPerformed

    private void tblHorariosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblHorariosMouseClicked
        DefaultTableModel model = (DefaultTableModel) tblHorarios.getModel();        
        hrConsulta.setText(String.valueOf(model.getValueAt(tblHorarios.getSelectedRow(), 0)));
    }//GEN-LAST:event_tblHorariosMouseClicked

    private void btMarcarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btMarcarActionPerformed
        if( !( dtConsulta.getText().equals("  /  /    ")  || hrConsulta.getText().equals("  :  ") ||
            (nomePaciente.getText().equals("") && cpfPaciente.getText().equals("   .   .   -  ")) ) )
        {
            boolean pacienteCadastrado = false;

            FileReader arq;
            try {
                arq = new FileReader("Pacientes.txt");
                BufferedReader lerArq = new BufferedReader(arq);
                String linha = lerArq.readLine();
                String partes[];
                while(linha != null)
                {
                    partes = linha.split("; ");
                    if(nomePaciente.getText().equals(""))
                    {
                        if(cpfPaciente.getText().equals(partes[1]))
                        {
                            pacienteCadastrado = true;
                        }
                    }
                    else if(cpfPaciente.getText().equals("   .   .   -  "))
                    {   
                        if(nomePaciente.getText().equals(partes[0]))
                        {
                            pacienteCadastrado = true;
                        }
                    }
                    else if(partes[0].equals(nomePaciente.getText()) && partes[1].equals(cpfPaciente.getText()))
                    {
                        pacienteCadastrado = true;
                    }
                    linha = lerArq.readLine();
                }
                lerArq.close();
                arq.close();
            } catch (FileNotFoundException ex)
            {
                JOptionPane.showMessageDialog(rootPane, "Erro:\n" + ex);
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(rootPane, "Erro:\n" + ex);
            }

            if(pacienteCadastrado)
            {
                DefaultTableModel model = (DefaultTableModel) tblHorarios.getModel();
            
                int j = 0;
                for(int i = 0; i < model.getRowCount(); i++)
                {
                    if(String.valueOf(model.getValueAt(i, j)).equals(hrConsulta.getText()))
                    {
                        if(String.valueOf(model.getValueAt(i, j+1)) == "OCUPADO")
                        {
                            JOptionPane.showMessageDialog(rootPane, "Erro:\nVocê deve escolher um horário livre");
                        }
                        else
                        {
                            model.setValueAt("OCUPADO", i, j+1);
                            String linha = dtConsulta.getText();
                            String data[] = linha.split("/");

                            int dia = Integer.parseInt(data[0]);
                            int mes = Integer.parseInt(data[1]);
                            int ano = Integer.parseInt(data[2]);

                            linha = hrConsulta.getText();
                            String horario[] = linha.split(":");

                            int hora = Integer.parseInt(horario[0]);
                            int minuto = Integer.parseInt(horario[1]);

                            Consulta consulta = new Consulta(new Data(dia, mes, ano), new Horario(hora, minuto),
                                                             nomeProfissional.getText(), nomePaciente.getText(),
                                                                   cpfPaciente.getText(), observacao.getText());

                            linha = data[0] + data[1] + data[2];
                            FileWriter file;
                            FileWriter arquivo;
                            try
                            {
                                file = new FileWriter(linha + ".txt", true);
                                arquivo = new FileWriter("logConsultas.txt", true);

                                PrintWriter writer = new PrintWriter(file);
                                PrintWriter escritor = new PrintWriter(arquivo);

                                writer.printf("%s", consulta.toString());
                                escritor.printf("%s", consulta.marcaNoLog());

                                writer.close();
                                escritor.close();
                                file.close();
                                arquivo.close();
                            }catch (IOException e)
                            {
                                JOptionPane.showMessageDialog(rootPane, "Erro:\n" + e);
                            }
                            
                            JOptionPane.showMessageDialog(rootPane, "Procedimento agendado com sucesso");
                            
                        }
                    }
                }
            }
            else
            {
                JOptionPane.showMessageDialog(rootPane, "Erro:\n Conferir cadastro do paciente");
            }

        }
        else
        {
            JOptionPane.showMessageDialog(rootPane, "Erro:\nVocê deve preencher os dados da seção \"AGENDAMENTO\"");
        }
        

    }//GEN-LAST:event_btMarcarActionPerformed

    private void btDesmarcarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btDesmarcarActionPerformed
        boolean successfulUm = false;
        boolean successfulDois = false;
        if( !( dtConsulta.getText().equals("  /  /    ")  || hrConsulta.getText().equals("  :  ")) )
        {
            DefaultTableModel model = (DefaultTableModel) tblHorarios.getModel();
            int j = 0;
            for(int i = 0; i < model.getRowCount(); i++)
            {
                if(model.getValueAt(i, j).equals(hrConsulta.getText()))
                {
                    if(String.valueOf(model.getValueAt(i, j + 1)).equals("LIVRE"))
                    {
                        JOptionPane.showMessageDialog(rootPane, "Erro:\nVocê não pode desmarcar um horário que está livre");
                    }
                    else
                    {
                        model.setValueAt("LIVRE", i, j+1);
                        String dt = dtConsulta.getText();
                        String data[] = dt.split("/");
                        dt = data[0] + data[1] + data[2];
        
                        try
                        {
                            // Para remover da log de consultas
                            File arq = new File("logConsultas.txt");
                            File arqTemp = new File("ArqTemporario.txt");
                            BufferedReader leitor = new BufferedReader(new FileReader(arq));
                            PrintWriter escritor = new PrintWriter(arqTemp);
                            // Para remover do arquivo de consultas naquela data
                            File file = new File(dt + ".txt");
                            File tempFile = new File("TempFile.txt");
                            BufferedReader reader = new BufferedReader(new FileReader(file));
                            PrintWriter writer = new PrintWriter(tempFile);
              
                            // 1º -> remove da log de consultas
                            String line = leitor.readLine();
                            String parts[];
                            String lineToRemove = "";
                            String linhaDoMomento;
                            
                            while(line != null)
                            {
                                parts = line.split("\t");
                                if(nomeProfissional.getText().equals(parts[2]) &&
                                         dtConsulta.getText().equals(parts[4]) &&
                                               hrConsulta.getText().equals(parts[5]))
                                {
                                    lineToRemove = line;
                                }
                                line = leitor.readLine();
                            }
                            
                            leitor.close();
                            
                            BufferedReader ler = new BufferedReader(new FileReader(arq));
                            
                            linhaDoMomento = ler.readLine();
                            
                             while(linhaDoMomento != null)
                            {
                                if(!(linhaDoMomento.equals(lineToRemove)))
                                {
                                   escritor.printf(linhaDoMomento + "%n");
                                }
                                linhaDoMomento = ler.readLine();
                            }
                             
                            escritor.close();
                            ler.close();
                            arq.delete();
                            
                            successfulDois = arqTemp.renameTo(new File("logConsultas.txt"));
                            
                            // 2º -> remove do arquivo de consultas naquela data
                            String linha = reader.readLine();
                            String partes[];
                            String remover = "";
                            String currentLine;

                
                            while(linha != null)
                            {
                                partes = linha.split("\t");
                                if(hrConsulta.getText().equals(partes[4]))
                                {
                                    remover = linha;
                                }
                                linha = reader.readLine();
                            }
                            
                            reader.close();
                            
                            BufferedReader lerArq = new BufferedReader(new FileReader(file));
                            
                            currentLine = lerArq.readLine();
                            
                            while(currentLine != null)
                            {
                                if(!(currentLine.equals(remover)))
                                {
                                   writer.printf(currentLine + "%n");
                                }
                                currentLine = lerArq.readLine();
                            }
                            writer.close(); 
                            lerArq.close(); 
                            file.delete();
                            successfulUm = tempFile.renameTo(new File(dt + ".txt"));
                        } catch (FileNotFoundException ex) {
                            JOptionPane.showMessageDialog(rootPane, "Erro:\n" + ex);
                        } catch (IOException ex) {
                            JOptionPane.showMessageDialog(rootPane, "Erro:\n" + ex);
                        }
                    }  
                }       
            }
        }
        else
        {
            JOptionPane.showMessageDialog(rootPane, "Erro:\nVocê deve inserir a data e o horário do procedimento que queira desmarcar");
        } 
        
        if(successfulUm && successfulDois)
        {
            JOptionPane.showMessageDialog(rootPane, "Procedimento desmarcado com sucesso");
        }
    }//GEN-LAST:event_btDesmarcarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Agendamento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Agendamento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Agendamento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Agendamento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Agendamento().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton btAplicar;
    private javax.swing.JButton btDesmarcar;
    private javax.swing.JButton btMarcar;
    private javax.swing.JButton btSair;
    private javax.swing.JButton btVoltar;
    private javax.swing.JFormattedTextField cpfPaciente;
    private javax.swing.JFormattedTextField dtConsulta;
    private javax.swing.JFormattedTextField dtSugerida;
    private javax.swing.JFormattedTextField hrConsulta;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField nomePaciente;
    private javax.swing.JTextField nomeProfissional;
    private javax.swing.JTextArea observacao;
    private javax.swing.JTable tblHorarios;
    // End of variables declaration//GEN-END:variables
}
