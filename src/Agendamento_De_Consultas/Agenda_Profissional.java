/**
* IF62C: Fundamentos de Programação 2
* Programação Orientada a Objetos
*/

package Agendamento_De_Consultas;

import java.awt.Toolkit;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author joaoz
 */
public class Agenda_Profissional extends javax.swing.JFrame {

    private int clicado = 0;
    /**
     * Creates new form Agenda_Profissional
     */
    public Agenda_Profissional() {
        this.setAlwaysOnTop(true);
        this.setResizable(false);
        this.setUndecorated(true);
        initComponents();
        
        Toolkit tk = Toolkit.getDefaultToolkit();
        int tamanhoX = (int) tk.getScreenSize().getWidth();
        int tamanhoY = (int) tk.getScreenSize().getHeight();
        
        this.setSize(tamanhoX, tamanhoY);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblHorarios = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        btAplicar = new javax.swing.JToggleButton();
        jLabel8 = new javax.swing.JLabel();
        nomeProfissional = new javax.swing.JTextField();
        dtAgenda = new javax.swing.JFormattedTextField();
        btVoltar = new javax.swing.JButton();
        btSair = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tblHorarios.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        tblHorarios.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tblHorarios.setColumnSelectionAllowed(true);
        jScrollPane1.setViewportView(tblHorarios);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Data:");

        btAplicar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btAplicar.setMnemonic('a');
        btAplicar.setText("Aplicar");
        btAplicar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAplicarActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel8.setText("Profissional: ");

        try {
            dtAgenda.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        btVoltar.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btVoltar.setMnemonic('v');
        btVoltar.setText(" Voltar");
        btVoltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btVoltarActionPerformed(evt);
            }
        });

        btSair.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btSair.setMnemonic('s');
        btSair.setText("Sair");
        btSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSairActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(547, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel8))
                        .addGap(384, 384, 384)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(dtAgenda, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(177, 177, 177)
                                .addComponent(btAplicar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(nomeProfissional, javax.swing.GroupLayout.PREFERRED_SIZE, 343, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(545, 545, 545))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btVoltar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(44, 44, 44)
                        .addComponent(btSair, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(49, 49, 49))))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(550, 550, 550)
                    .addComponent(jScrollPane1)
                    .addGap(550, 550, 550)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(136, 136, 136)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(nomeProfissional, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addGap(81, 81, 81)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(dtAgenda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btAplicar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 721, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btSair, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btVoltar, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(390, 390, 390)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(390, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btAplicarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAplicarActionPerformed
        DefaultTableModel model = (DefaultTableModel) tblHorarios.getModel();

        if(!(nomeProfissional.getText().equals("")))
        {
            if(clicado > 0)
            {
                model.setColumnCount(0);
            }

            clicado++;

            try{
                FileReader arq = new FileReader(nomeProfissional.getText() + ".txt");
                BufferedReader lerArq = new BufferedReader(arq);

                String line = "";
                String ultima = "";
                while(line != null)
                {
                    line = lerArq.readLine();
                    if(line != null)
                    ultima = line;
                }
                String turnos[] = ultima.split(": ");

                Turno manha = new Turno(new Horario(7, 30), new Horario(12, 50), 50, true);
                Turno tarde = new Turno(new Horario(13, 0), new Horario(18, 40), 50, true);
                Turno noite = new Turno(new Horario(18, 40), new Horario(23, 0), 50, true);

                Object[] hrsProf = new Object[]{};

                ArrayList<Turno> turnosProf = new ArrayList();

                switch (turnos[1]) {
                    case "MTN":
                    turnosProf.add(manha);
                    turnosProf.add(tarde);
                    turnosProf.add(noite);
                    break;
                    case "MT":
                    turnosProf.add(manha);
                    turnosProf.add(tarde);
                    break;
                    case "MN":
                    turnosProf.add(manha);
                    turnosProf.add(noite);
                    break;
                    case "TN":
                    turnosProf.add(tarde);
                    turnosProf.add(noite);
                    break;
                    case "M":
                    turnosProf.add(manha);
                    break;
                    case "T":
                    turnosProf.add(tarde);
                    break;
                    default:
                    turnosProf.add(noite);
                    break;
                }

                ArrayList<String> horariosProf = new ArrayList();

                int qteDeHorarios = 0;
                int k = 0;
                for(Turno item: turnosProf)
                {
                    qteDeHorarios += item.retornaHorarios().size();
                    for(Horario i: item.retornaHorarios())
                    {
                        horariosProf.add(i.toString());
                    }
                }

                hrsProf = horariosProf.toArray();

                model.addColumn("Horários", hrsProf);

                Object[] disponibilidade = new Object[]{};

                ArrayList<String> disp = new ArrayList();

                for(int i = 0; i < hrsProf.length; i++)
                {
                    disp.add("LIVRE");
                }

                disponibilidade = disp.toArray();
                
                String dt;
                        
                if(dtAgenda.getText().equals("  /  /    "))
                {
                    Data data = new Data();
                    dt = data.toString();
                }
                else
                {
                    dt = dtAgenda.getText();
                }
                
                String data[] = dt.split("/");
                dt = data[0] + data[1] + data[2];

                File f = new File(dt + ".txt");

                if(f.exists() && !f.isDirectory())
                {
                    FileReader file;
                    try {
                        file = new FileReader(dt + ".txt");
                        BufferedReader reader = new BufferedReader(file);
                        String linha = reader.readLine();
                        String partes[];
                        while(linha != null)
                        {
                            partes = linha.split("\t");

                            if(partes[0].equals(nomeProfissional.getText()))
                            {
                                for(int i = 0; i < hrsProf.length; i++)
                                {
                                    if(partes[4].equals(hrsProf[i].toString()))
                                    {
                                        disponibilidade[i] = "OCUPADO";
                                    }
                                }
                            }
                            linha = reader.readLine();
                        }
                        reader.close();
                        file.close();
                    }catch (IOException e)
                    {

                        JOptionPane.showMessageDialog(rootPane, "Erro:\n" + e);
                    }
                }

                if(dtAgenda.getText().equals("  /  /    "))
                {
                    model.addColumn(new Data().toString(), disponibilidade);
                }
                else
                {
                    model.addColumn(dtAgenda.getText(), disponibilidade);
                }
                
            }   catch (FileNotFoundException e) {
                JOptionPane.showMessageDialog(rootPane, "Erro:\n" + e);
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(rootPane, "Erro:\n" + ex);
            }
        }
        else
        {
            if(dtAgenda.getText().equals("  /  /    ") && nomeProfissional.getText().equals(""))
            {
                JOptionPane.showMessageDialog(rootPane, "Erro:\nVocê deve inserir uma data e o nome do profissional responsável.");
            }
            else if(dtAgenda.getText().equals("  /  /    "))
            {
                JOptionPane.showMessageDialog(rootPane, "Erro:\nVocê deve inserir uma data.");
            }
            else
            {
                JOptionPane.showMessageDialog(rootPane, "Erro:\nVocê deve inserir o nome do profissional responsável.");
            }
        }
    }//GEN-LAST:event_btAplicarActionPerformed

    private void btVoltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btVoltarActionPerformed
        Principal principal = new Principal();
        principal.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btVoltarActionPerformed

    private void btSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSairActionPerformed
        this.dispose();
    }//GEN-LAST:event_btSairActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Agenda_Profissional.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Agenda_Profissional.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Agenda_Profissional.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Agenda_Profissional.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Agenda_Profissional().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton btAplicar;
    private javax.swing.JButton btSair;
    private javax.swing.JButton btVoltar;
    private javax.swing.JFormattedTextField dtAgenda;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField nomeProfissional;
    private javax.swing.JTable tblHorarios;
    // End of variables declaration//GEN-END:variables
}
